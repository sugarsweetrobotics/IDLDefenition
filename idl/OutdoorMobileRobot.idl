#ifndef GPSDataTypes_idl
#define GPSDataTypes_idl

#include "InterfaceDataTypes.idl"


module NAVIGATION {

    enum EarthEllipsoidType
    {
        WGS84;  /// Mainly used by GPS
        GRS80;  /// Mainly used in America, Europe and Japan
        BESSEL;  /// Mainly used in Japan until 2002
        SK42;  /// Mainly used in Russia
        PZ90;  /// Used by GLONASS
    };
    
    /// playerでは0,1,2と定義されている．
    enum QuorityOfGPS
    {
        UNREVEIVABLE;
        INDEPENDENT_POSITIONING;
        DGPS;
    };

    struct GPSData
    {
        /// Longitude from GPS
        double longitude;
        /// Latitude from GPS
        double latitude;
        /// Variance of GPS Data
        double variance;
        /// Antenna altitude from average sea level 
        double altitude;
        /// quality of gps,
        QuorityOfGPS quority;
        /// Number of satellite
        unsigned short satellite;
        /// Data received timestamp [ms]
        unsigned long receivedTimestamp;
        /// UTM coordinate, east [m]
        double utm_east;
        /// UTM coordinate, north [m]
        double utm_north;
        /// pdop. pdop^2 = vdop^2 + hdop^2
        double pdop;
        double rdop;
        double gdop;
        /// vdop
        double vdop;
        /// hdop
        double hdop;
        /// Earth ellipsoid
        EarthEllipsoidType earth_ellipsoid_type;
        /// Ground speed
        double ground_speed;
        /// direction
        unsigned double direction;
    };

    /*!
     * @struct TimedGPSData
     * @brief GPS data include time and accuracy
     */
    struct TimedGPSData
    {
        /// Time stamp. 
        RTC::Time tm;
        /// GpsData
        GPSData Data;
    };
    enum InitGPSReturnStatus {
        SUCCESS_INITIALIZATION;
        HIGH_VARIANCE_ERROR;
        FOUND_OBSTACLE_ERROR;

    };

    typedef sequence<InitGPSDatas> TimedGPSData;

    interface GPSModule
    {
        InitGPSReturnStatus initGPSPosition(out InitGPSDatas);

        RETRUN_VALUE getGPSData();
    };

  
  struct OGMapConfig {
    RTC::Pose2D globalPositionOfTopLeft; // 左上のグローバルな位置情報。
    RTC::Size2D sizeOfGrid;
    RTC::Size2D sizeOfMap; // マップのサイズ。widthとheight。単位はm
  };

  typedef sequence<octet> OGMapCells;

  struct OGMapRequestParam {
    RTC::Pose2D globalPositionOfCenter;
    RTC::Size2D sizeOfMap;
    RTC::Size2D sizeOfGrid;
  }
  
  struct OGMap {
    OGMapCells cells; // マップの実際のデータ
    OGMapConfig config; // マップのコンフィグ
  };

  enum MapReturnStatus {
    // リクエストされたマップの位置をMapServerが何も保持していない場合
    //INVALID_REQUEST;
    // リクエストされた範囲の中にMapServerが保持していない範囲が含まれているとき、
    // それを除いて保持している部分だけ返す場合
    //RETURN_PARTIAL_MAP;
    
    // RETURN_VALUEを拡張
    // COMMON
    RETVAL_OK,
    RETVAL_INVALID_PARAMETER,
    RETVAL_EMPTY_MAP,
    RETVAL_INVALID_PRECONDITION,
    RETVAL_NOT_IMPL,
    RETVAL_UNKNOWN_ERROR,
    RETVAL_NOT_FOUND,
    RETVAL_ODOMETRY_INVALID_VALUE,
    RETVAL_ODOMETRY_TIME_OUT,
    RETVAL_RANGE_INVALID_VALUE,
    RETVAL_RANGE_TIME_OUT,
    RETVAL_EMERGENCY_STOP,
    RETVAL_OUTOF_RANGE
  };


  interface OGMapServer {
    MapReturnStatus requestLocalMap(in OGMapRequestParam param, out OGMap map);
  };
  
  /**
   * Particle Information.
   * This struct is specialized for Monte-Carlo Localization.
   */
  struct MCLParticle {
    
    RTC::Pose3D pose; // 3D Pose. This might be redundant.
    
    double weight;
  };
  typedef sequence<MCLParticle> MCLPartileList;

  /**
   * Key Value pair.
   */
  struct MCLConfigKeyValue {
    string key;
    string value;
  };
  typedef sequence<MCLConfigKeyValue> MCLConfigMap;
  

  /**
   *
   */
  struct MCLInfo {

    /**
     * Particle Information
     */
    MCLParticleList particles;

    /**
     * Configuration is provided with Key-value string pair.
     */
    MCLConfigMap config;
  };


  enum MCL_RETURN_STATUS {
    RETVAL_OK,
    RETVAL_FAILED_UNKNOWN
  };


  struct ParticleResetParam {
    RTC::Covariance3D sigma;
    unsigned long numOfParticles;
    RTC::Pose3D center;
  };
  
  /**
   * Interface for Service Port of MCL (Monte Carlo Localization
   */
  interface MonteCarloLocalization {

    MCL_RETURN_STATUS resetParticles(in ParticleResetParam param);
    
    MCL_RETURN_STATUS requestParticles(out MCLInfo particles);
    
    MCL_RETURN_STATUS setParticles(in MCLInfo particles);
  };
};

#endif
